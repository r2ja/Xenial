-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.comments
(
    comment_id integer NOT NULL DEFAULT nextval('comments_comment_id_seq'::regclass),
    post_id integer NOT NULL,
    user_id integer NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT comments_pkey PRIMARY KEY (comment_id)
);

CREATE TABLE IF NOT EXISTS public.followers
(
    follower_id integer NOT NULL,
    followed_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT followers_pkey PRIMARY KEY (follower_id, followed_id)
);

CREATE TABLE IF NOT EXISTS public.likes
(
    like_id integer NOT NULL DEFAULT nextval('likes_like_id_seq'::regclass),
    user_id integer NOT NULL,
    post_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT likes_pkey PRIMARY KEY (like_id)
);

CREATE TABLE IF NOT EXISTS public.media
(
    media_id integer NOT NULL DEFAULT nextval('media_media_id_seq'::regclass),
    post_id integer NOT NULL,
    media_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    media_url character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT media_pkey PRIMARY KEY (media_id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    notification_id integer NOT NULL DEFAULT nextval('notifications_notification_id_seq'::regclass),
    user_id integer NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    is_read boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.post_tags
(
    post_id integer NOT NULL,
    tag_id integer NOT NULL,
    CONSTRAINT post_tags_pkey PRIMARY KEY (post_id, tag_id)
);

CREATE TABLE IF NOT EXISTS public.posts
(
    post_id integer NOT NULL DEFAULT nextval('posts_post_id_seq'::regclass),
    user_id integer NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT posts_pkey PRIMARY KEY (post_id)
);

CREATE TABLE IF NOT EXISTS public.reposts
(
    repost_id integer NOT NULL DEFAULT nextval('reposts_repost_id_seq'::regclass),
    user_id integer NOT NULL,
    post_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT reposts_pkey PRIMARY KEY (repost_id)
);

CREATE TABLE IF NOT EXISTS public.tags
(
    tag_id integer NOT NULL DEFAULT nextval('tags_tag_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tags_pkey PRIMARY KEY (tag_id)
);

CREATE TABLE IF NOT EXISTS public.user_profiles
(
    profile_id integer NOT NULL DEFAULT nextval('user_profiles_profile_id_seq'::regclass),
    user_id integer NOT NULL,
    full_name character varying(100) COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    avatar_url character varying(255) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT user_profiles_pkey PRIMARY KEY (profile_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id integer NOT NULL DEFAULT nextval('users_user_id_seq'::regclass),
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(255) COLLATE pg_catalog."default",
    google_id character varying(255) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    first_name character varying(50) COLLATE pg_catalog."default",
    last_name character varying(50) COLLATE pg_catalog."default",
    date_of_birth date,
    CONSTRAINT users_pkey PRIMARY KEY (user_id)
);

ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (post_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_comments_post_id
    ON public.comments(post_id);


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.followers
    ADD CONSTRAINT followers_followed_id_fkey FOREIGN KEY (followed_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.followers
    ADD CONSTRAINT followers_follower_id_fkey FOREIGN KEY (follower_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.likes
    ADD CONSTRAINT likes_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (post_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_likes_post_id
    ON public.likes(post_id);


ALTER TABLE IF EXISTS public.likes
    ADD CONSTRAINT likes_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.media
    ADD CONSTRAINT media_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (post_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.post_tags
    ADD CONSTRAINT post_tags_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (post_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.post_tags
    ADD CONSTRAINT post_tags_tag_id_fkey FOREIGN KEY (tag_id)
    REFERENCES public.tags (tag_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.posts
    ADD CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.reposts
    ADD CONSTRAINT reposts_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (post_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_reposts_post_id
    ON public.reposts(post_id);


ALTER TABLE IF EXISTS public.reposts
    ADD CONSTRAINT reposts_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_profiles
    ADD CONSTRAINT user_profiles_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS user_profiles_user_id_key
    ON public.user_profiles(user_id);

END;
